---
select: item2
dropdownCollection: src/docs/configuration/object-field.md
dropdownValues: |
  other: item1
  test: A
dropdownStrings: Item 2
md: >-
  ## Useful Public Utils


  ![](/media/IMG_5934.jpeg)


  -   `{cs}AnimationRuntimeUtils`
      
  -   solve two bone, fabrik, etc
      
  -   requires animation stream
      
  -   Property Binding Helpers
      
      -   `{cs}BoolProperty`
          
      -   `{cs}FloatProperty`
          
      -   `{cs}IntProperty`
          
      -   `{cs}Vector2Property`


          
  -   etc
      

  ## Rig Builder


  -   Rig Builder has a list of "Layers"
      
  -   "Layers" in inspector are "Rig"s
      
  -   Children of theses Rigs are built up of Monobehaviour Constraints
      
      -   these have a binder, data etc
          
      -   these use the binder to provide a constraint
          
          -   this creates the job with the data
      -   so basically, to create a new mono constraint, **define a binder, data, and job**


          
  -   Rig Builder goes through rig layers (rigs)
      
  -   these look for constraints (IRigConstraint) in children and serialize them
  into a list
      
      -   this is done with helper `RigUtils.GetConstraints(rig)`
  -   the list is copied as an array
      
  -   this array is sent to `RigBuilderUtils.BuildPlayableGraph(animator,
  m_RuntimeRigLayers, syncSceneToStreamLayer)`
      
      -   this converts the list of constraints to a list of playables to build into a graph
  -   Base RigConstraint<> internally update the data passed to the IAnimatorJob
      
      -   When you create your own, you implement UpdateJob which does it for you.
  -   see \[\[#Building the Graph|graph\]\]
      

  ![](https://i.imgur.com/LWt7gIO.png)



  ```cs

  public interface IRigLayer

  {
      // The Rig associated to the IRigLayer
      Rig rig { get; }

      // The list of constraints associated with the IRigLayer.
      IRigConstraint[] constraints { get; }
      // The list of jobs built from constraints associated with the IRigLayer.
      IAnimationJob[] jobs { get; }

      // The active state. True if the IRigLayer is active, false otherwise.
      bool active { get; }
      // The IRigLayer name.
      string name { get; }


      /// Initializes the IRigLayer

      /// animator The Animator used to animate the IRigLayer constraints.
      /// True if IRigLayer was initialized properly, false otherwise.
      bool Initialize(Animator animator);

      /// Updates the IRigLayer jobs.

      void Update();

      /// Resets the IRigLayer.

      void Reset();


      /// Queries whether the IRigLayer is valid.

      /// True if IRigLayer is valid, false otherwise.
      bool IsValid();
  }

  ```
color: "#C928286E"
colors:
  - {}
number: 23324
layout: layouts/base.njk
promotion:
  text: "Pages CMS 1.0.0 is out! "
  url: https://github.com/pages-cms/pages-cms/discussions/128
title: "The No-Hassle CMS for Static Sites Generators "
description: Tired of juggling Git and YAML to update your Next.js, Astro, Hugo
  or Nuxt website? Make it easy on you and your team, get a user-friendly CMS
  running straight on top of GitHub.
features:
  title: Packed with features...
  entries:
    - soon: false
faq:
  title: Frequently asked questions
  entries:
    - {}
---
